/* Generated by grunt-webfont */

<% if (fontfaceStyles) { %>
<% if (fontSrc1 && embed.length) { %>
@font-face {
	font-family:"<%= fontBaseName %>";
	src:<%= fontSrc1 %>;
	font-weight:normal;
	font-style:normal;
}
<% } %>@font-face {
	font-family:"<%= fontBaseName %>";<% if (fontSrc1) { %>
	src:<%= fontSrc1 %>;<% }%>
	src:<%= fontSrc2 %>;
	font-weight:normal;
	font-style:normal;
}
<% } %>
<% if (baseStyles) { %>.<%= baseClass %><% if (addLigatures) { %>,
.ligature-icons<% } %> {
	font-family:"<%= fontBaseName %>";
	display:inline-block;
	/*vertical-align:middle;*/
	line-height:1;
	font-weight:normal;
	font-style:normal;
	speak:none;
	text-decoration:inherit;
	text-transform:none;
	text-rendering:optimizeLegibility;
	-webkit-font-smoothing:antialiased;
	-moz-osx-font-smoothing:grayscale;
}
<% } %>

/* makes the font 33% larger relative to the icon container */
.twj-lg {
  font-size: 1.33333333em;
  line-height: 0.75em;
  vertical-align: -15%;
}
.twj-2x {
  font-size: 2em;
}
.twj-3x {
  font-size: 3em;
}
.twj-4x {
  font-size: 4em;
}
.twj-5x {
  font-size: 5em;
}
.twj-fw {
  width: 1.28571429em;
  text-align: center;
}
.twj-ul {
  padding-left: 0;
  margin-left: 2.14285714em;
  list-style-type: none;
}
.twj-ul > li {
  position: relative;
}
.twj-li {
  position: absolute;
  left: -2.14285714em;
  width: 2.14285714em;
  top: 0.14285714em;
  text-align: center;
}
.twj-li.twj-lg {
  left: -1.85714286em;
}
.twj-border {
  padding: .2em .25em .15em;
  border: solid 0.08em #eeeeee;
  border-radius: .1em;
}
.pull-right {
  float: right;
}
.pull-left {
  float: left;
}
.fa.pull-left {
  margin-right: .3em;
}
.fa.pull-right {
  margin-left: .3em;
}
.twj-spin {
  -webkit-animation: twj-spin 2s infinite linear;
  animation: twj-spin 2s infinite linear;
}
.twj-pulse {
  -webkit-animation: twj-spin 1s infinite steps(8);
  animation: twj-spin 1s infinite steps(8);
}
@-webkit-keyframes twj-spin {
  0% {
    -webkit-transform: rotate(0deg);
    transform: rotate(0deg);
  }
  100% {
    -webkit-transform: rotate(359deg);
    transform: rotate(359deg);
  }
}
@keyframes twj-spin {
  0% {
    -webkit-transform: rotate(0deg);
    transform: rotate(0deg);
  }
  100% {
    -webkit-transform: rotate(359deg);
    transform: rotate(359deg);
  }
}
.twj-rotate-90 {
  filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=1);
  -webkit-transform: rotate(90deg);
  -ms-transform: rotate(90deg);
  transform: rotate(90deg);
}
.twj-rotate-180 {
  filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=2);
  -webkit-transform: rotate(180deg);
  -ms-transform: rotate(180deg);
  transform: rotate(180deg);
}
.twj-rotate-270 {
  filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=3);
  -webkit-transform: rotate(270deg);
  -ms-transform: rotate(270deg);
  transform: rotate(270deg);
}
.twj-flip-horizontal {
  filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=0, mirror=1);
  -webkit-transform: scale(-1, 1);
  -ms-transform: scale(-1, 1);
  transform: scale(-1, 1);
}
.twj-flip-vertical {
  filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=2, mirror=1);
  -webkit-transform: scale(1, -1);
  -ms-transform: scale(1, -1);
  transform: scale(1, -1);
}
:root .twj-rotate-90,
:root .twj-rotate-180,
:root .twj-rotate-270,
:root .twj-flip-horizontal,
:root .twj-flip-vertical {
  filter: none;
}
.twj-stack {
  position: relative;
  display: inline-block;
  width: 2em;
  height: 2em;
  line-height: 2em;
  vertical-align: middle;
}
.twj-stack-1x,
.twj-stack-2x {
  position: absolute;
  left: 0;
  width: 100%;
  text-align: center;
}
.twj-stack-1x {
  line-height: inherit;
}
.twj-stack-2x {
  font-size: 2em;
}
.twj-inverse {
  color: #ffffff;
}
/* Font Tawja uses the Unicode Private Use Area (PUA) to ensure screen
   readers do not read off random characters that represent icons */

<% if (iconsStyles) { %>/* Icons */<% for (var glyphIdx = 0; glyphIdx < glyphs.length; glyphIdx++) { %>
<% if (stylesheet === 'less') { %>
.<%= mixinPrefix %><%= glyphs[glyphIdx] %>() {
	&:before {
		content:"<% if (addLigatures) { %><%= glyphs[glyphIdx] %><% } else { %>\<%= codepoints[glyphIdx] %><% } %>";
	}
	<% if (ie7) {%>
	*zoom: expression( this.runtimeStyle['zoom'] = '1', this.innerHTML = '&#x<%= codepoints[glyphIdx] %>;');
	<% } %>
}
.<%= classPrefix %><%= glyphs[glyphIdx] %>{
 	.<%= mixinPrefix %><%= glyphs[glyphIdx] %>();
}<% } else { %>
<% if (ie7) {%>.<%= classPrefix %><%= glyphs[glyphIdx] %> {
	*zoom: expression( this.runtimeStyle['zoom'] = '1', this.innerHTML = '&#x<%= codepoints[glyphIdx] %>;');
}
<% } %>
.<%= classPrefix %><%= glyphs[glyphIdx] %>:before {
	content:"<% if (addLigatures) { %><%= glyphs[glyphIdx] %><% } else { %>\<%= codepoints[glyphIdx] %><% } %>";
}<% } } } %>
